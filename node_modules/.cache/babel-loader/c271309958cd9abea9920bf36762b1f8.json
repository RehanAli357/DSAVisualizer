{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\dsavisualizer\\\\src\\\\Searching\\\\BinarySearch.jsx\",\n    _s = $RefreshSig$();\n\nimport react, { useState } from \"react\";\nimport LinearBinarySearch from \"../DataBase/Searching DataBase/LinearBinarySearch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BinarySearching = () => {\n  _s();\n\n  const [temp, settemp] = useState(); //for array\n\n  const [temp2, settemp2] = useState(); // for flag\n\n  const [size, setsize] = useState(); //for actual array \n\n  const [flag, setflag] = useState(); //for actual flag\n\n  const [index_pos, setIndex_pos] = useState(-2); //flag index\n\n  const [disp, setdisp] = useState({\n    display: 'none',\n    bgcolor: 'aliceblue',\n    color: 'black'\n  });\n  const [Arr, setArr] = useState([]);\n  let arr = [];\n\n  const Size = e => {\n    e.preventDefault();\n\n    if (temp === '') {\n      alert('enter the value');\n    } else {\n      setsize(temp);\n      settemp('');\n      Array([]);\n      setArr(arr);\n    }\n  };\n\n  const Flag = e => {\n    e.preventDefault();\n\n    if (temp2 === '') {\n      alert('enter the value');\n    } else {\n      setflag(temp2);\n      settemp2('');\n      setdisp({\n        display: 'block'\n      });\n    }\n  };\n\n  const comparison = (a, b) => {\n    return a - b;\n  };\n\n  const Array = () => {\n    for (let index = 0; index < size; index++) {\n      let element = Math.floor(Math.random(100) * 100);\n      arr[index] = element;\n    }\n\n    arr.sort(comparison);\n  };\n\n  const BinarySearch = async function () {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n    setdisp({\n      bgcolor: 'black',\n      color: 'aliceblue'\n    });\n    let min = 0;\n    let max = size - 1;\n\n    while (min <= max) {\n      let midIndex = Math.floor((min + max) / 2);\n      let mid = document.getElementById(`key${midIndex}`);\n      mid.style.backgroundColor = \"yellow\";\n\n      if (Arr[midIndex] < parseInt(flag)) {\n        min = midIndex + 1;\n        max = size - 1;\n      } else if (Arr[midIndex] > parseInt(flag)) {\n        max = midIndex - 1;\n        min = 0;\n      } else {\n        mid.style.backgroundColor = \"green\";\n        setIndex_pos(midIndex);\n        break;\n      }\n\n      await new Promise(resolve => setTimeout(() => {\n        resolve();\n      }, 300));\n    }\n  };\n\n  const Reset = () => {\n    setIndex_pos(-1);\n\n    for (let index = 0; index < size; index++) {\n      let mid = document.getElementById(`key${index}`);\n      mid.style.backgroundColor = \"transparent\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(react.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LinearSearch\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [LinearBinarySearch.heading2, \" Search\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: LinearBinarySearch.content2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Display\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Array Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter the Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"0 to 10\",\n          onChange: e => {\n            settemp(e.target.value);\n          },\n          value: temp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: Size,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter the Key To Find\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"0 to 10\",\n          onChange: e => {\n            settemp2(e.target.value);\n          },\n          value: temp2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: Flag,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Size Of Array Is=\", size, \" And Value to Find Is=\", flag]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            display: disp.display,\n            backgroundColor: disp.bgcolor,\n            color: disp.color\n          },\n          onClick: BinarySearch,\n          children: \"Find\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            display: disp.display\n          },\n          onClick: Reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"screen\",\n          children: [Arr.map((data, index) => {\n            return /*#__PURE__*/_jsxDEV(react.Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"box\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  id: `key${index}`,\n                  children: data\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 45\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 37\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              display: disp.display\n            },\n            children: [\"Data Found At INDEX \", index_pos]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinarySearching, \"p1L3hItqRmq2AZbYD9dz4phmi3A=\");\n\n_c = BinarySearching;\nexport default BinarySearching;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinarySearching\");","map":{"version":3,"names":["react","useState","LinearBinarySearch","BinarySearching","temp","settemp","temp2","settemp2","size","setsize","flag","setflag","index_pos","setIndex_pos","disp","setdisp","display","bgcolor","color","Arr","setArr","arr","Size","e","preventDefault","alert","Array","Flag","comparison","a","b","index","element","Math","floor","random","sort","BinarySearch","delay","min","max","midIndex","mid","document","getElementById","style","backgroundColor","parseInt","Promise","resolve","setTimeout","Reset","heading2","content2","target","value","map","data"],"sources":["D:/GitHub/dsavisualizer/src/Searching/BinarySearch.jsx"],"sourcesContent":["import react , { useState } from \"react\";\r\nimport LinearBinarySearch from \"../DataBase/Searching DataBase/LinearBinarySearch\";\r\nconst BinarySearching = ()=>{\r\n    const [temp , settemp] = useState();//for array\r\n    const [temp2,settemp2]=useState();// for flag\r\n    const [size,setsize]=useState();//for actual array \r\n    const [flag,setflag]=useState();//for actual flag\r\n    const [index_pos, setIndex_pos]=useState(-2);//flag index\r\n    const [disp,setdisp]=useState({\r\n        display:'none',\r\n        bgcolor:'aliceblue',\r\n        color:'black'\r\n    });\r\n    const [Arr,setArr]=useState([]);\r\n    let arr= [];\r\n    const Size = (e)=>{\r\n        e.preventDefault();\r\n       if(temp=== ''){\r\n        alert('enter the value');\r\n       }else{\r\n        setsize(temp);\r\n        settemp('');\r\n        Array([]);\r\n        setArr(arr);\r\n       }\r\n    }\r\n    const Flag = (e)=>{\r\n        e.preventDefault();\r\n       if(temp2=== ''){\r\n        alert('enter the value');\r\n       }\r\n       else{\r\n        setflag(temp2);\r\n        settemp2('');\r\n        setdisp({display:'block'});\r\n       }\r\n    }\r\n    const comparison = (a,b) =>{\r\n        return a-b;\r\n    }\r\n    const Array = ()=>{\r\n        for (let index = 0; index < size; index++) {\r\n            let element =Math.floor(Math.random(100)*100);\r\n            arr[index]=element;\r\n        }\r\n        arr.sort(comparison);\r\n    }\r\n    const BinarySearch = async(delay=300)=>{\r\n        setdisp({\r\n            bgcolor:'black',\r\n            color:'aliceblue'\r\n        })\r\n        let min=0;\r\n        let max=size-1;\r\n        while (min<=max) {\r\n            let midIndex=Math.floor((min+max)/2);\r\n            let mid= document.getElementById(`key${midIndex}`);\r\n            mid.style.backgroundColor=\"yellow\";\r\n            if(Arr[midIndex]<parseInt(flag)){\r\n                min=midIndex+1;\r\n                max=size-1;\r\n                }else if(Arr[midIndex]>parseInt(flag)){\r\n                max=midIndex-1;\r\n                min=0;\r\n            }else{\r\n                mid.style.backgroundColor=\"green\";\r\n                setIndex_pos(midIndex);\r\n                break;\r\n            }\r\n            await new Promise((resolve)=>setTimeout(()=>{\r\n                resolve();\r\n            },300))\r\n        }\r\n    }\r\n    const Reset = () =>{\r\n        setIndex_pos(-1);\r\n        for (let index = 0; index < size; index++) {\r\n            let mid= document.getElementById(`key${index}`);\r\n            mid.style.backgroundColor=\"transparent\";\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <react.Fragment>\r\n            <div className=\"LinearSearch\">\r\n                <h1>{LinearBinarySearch.heading2} Search</h1>\r\n                <p>{LinearBinarySearch.content2}\r\n                </p>\r\n                <div className=\"Display\">\r\n                    <h2>Array Size</h2>\r\n                    <label>Enter the Size</label>\r\n                    <input type=\"number\" \r\n                    placeholder=\"0 to 10\"\r\n                    onChange={(e)=>{settemp(e.target.value)}}\r\n                    value={temp}\r\n                    />\r\n                    <button onClick={Size}>Submit</button>\r\n                    <label>Enter the Key To Find</label>\r\n                    <input type=\"number\" \r\n                    placeholder=\"0 to 10\"\r\n                    onChange={(e)=>{settemp2(e.target.value)}}\r\n                    value={temp2}\r\n                    />\r\n\r\n                    <button onClick={Flag}>Submit</button>\r\n                    <p>Size Of Array Is={size} And Value to Find Is={flag}</p>\r\n                      <button \r\n                      style={{display:disp.display,backgroundColor:disp.bgcolor,color:disp.color}} \r\n                      onClick={BinarySearch}>Find</button>\r\n\r\n                      <button \r\n                      style={{display:disp.display}}\r\n                      onClick={Reset}>Reset</button>\r\n                    <div className=\"screen\">\r\n                        {\r\n                            Arr.map((data,index)=>{\r\n                                return(\r\n                                    <react.Fragment>\r\n                                        <div className=\"box\" key={index}>\r\n                                            <p id={`key${index}`} key={index}>{data}</p>\r\n                                        </div>\r\n                                    </react.Fragment>\r\n                                );\r\n                            })\r\n                        }\r\n                        <p style={{display:disp.display}}>Data Found At INDEX {index_pos}</p>\r\n                       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </react.Fragment>\r\n    );\r\n}\r\n\r\nexport default BinarySearching;"],"mappings":"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"},"metadata":{},"sourceType":"module"}