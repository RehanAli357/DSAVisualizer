{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\dsavisualizer\\\\src\\\\Stack\\\\Stack.jsx\",\n    _s = $RefreshSig$();\n\nimport react, { useEffect, useState } from \"react\";\nimport \"../Style/Stack.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Stack = () => {\n  _s();\n\n  const [temp, settemp] = useState();\n  const [temp2, settemp2] = useState();\n  const [size, setsize] = useState();\n  const [top, settop] = useState(-1);\n  const [stack, setstack] = useState([]);\n  const [fnName, setfnName] = useState('');\n  const [code, setcode] = useState();\n\n  const Size = () => {\n    if (!temp) {\n      alert('Enter the value');\n    } else {\n      setsize(temp);\n      settemp('');\n      setfnName('Declartion Function');\n      setcode(1);\n    }\n  };\n\n  const Push = () => {\n    if (!size) {\n      alert('Enter the value');\n    } else {\n      if (top <= parseInt(size) - 2) {\n        settop(top + 1);\n        let val = prompt(`Enter the ${top + 1} value`);\n        setstack([...stack, val]);\n        setfnName('Push Function');\n        setcode(2);\n      } else {\n        alert('Stack Full');\n      }\n    }\n  };\n\n  const Pop = () => {\n    if (top === -1) {\n      alert('stack empty');\n    } else {\n      let temp = stack[top];\n      console.log(temp);\n      let tempArr = stack.filter(elem => {\n        return elem !== temp;\n      });\n      setstack(tempArr);\n      settop(top - 1);\n      setfnName('Pop Function');\n      setcode(3);\n    }\n  };\n\n  const Peek = () => {\n    if (top === -1) {\n      alert(\"stack is empty\");\n    } else {\n      alert(`Your Top Value Is ${stack[top]}`);\n      setfnName('Peek Function');\n      setcode(4);\n    }\n  };\n\n  useEffect(() => {\n    settemp2(stack[top]);\n  }, [Pop]);\n  const dec = \"<\";\n  const open = \"{\";\n  const close = \"}\";\n  const sen1 = \"Checks wheather the top is less then equal to -1 \";\n  return /*#__PURE__*/_jsxDEV(react.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Array\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ArrayComp\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Heading\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Stack\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Content\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"q\", {\n              children: \"A stack is an  array or list structure of function calls and parameters used in modern computer and CPU architecture. Similar to a stack of plates at buffet resturent or cafeteria, element in a stack are added or removed from the top of the stack,in a \\\"last in first , first out\\\" or LIFO order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Syntax Common\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Enter Stack Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Size Between 1 to 10\",\n              onChange: e => {\n                settemp(e.target.value);\n              },\n              value: temp || ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: Size,\n              children: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"function Common\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: Push,\n              children: \"Push\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: Pop,\n              children: \"POP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: Peek,\n              children: \"Peek\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Discription\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Size=\", size, \" Top=\", top]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"CodeArea\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Code Of An Stack\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"code\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"C++ Program\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  width: '100%',\n                  textAlign: 'center'\n                },\n                children: fnName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 37\n              }, this), code === 1 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"int MAXSIZE = \", size, \";\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 66\n                }, this), \"int stack[\", size, \"];\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 63\n                }, this), \"int top = -1;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 58\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 54\n              }, this) : code === 2 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"if(top\", dec, \"=-1)\", open, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 66\n                }, this), \"printf(\\\"Enter the Value\\\");\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 71\n                }, this), close, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 52\n                }, this), \"else\", open, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 55\n                }, this), \"top=top+1;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 55\n                }, this), \"stack[top]=value;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 62\n                }, this), close]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 61\n              }, this) : code === 3 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"if(top\", dec, \"=-1)\", open, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 66\n                }, this), \"printf(\\\"No Data To Delete\\\");\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 73\n                }, this), close, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 52\n                }, this), \"else\", open, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 55\n                }, this), \"top=top-1;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 55\n                }, this), close]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 61\n              }, this) : code === 4 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"if(top\", dec, \"=-1)\", open, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 66\n                }, this), \"printf(\\\"No Data To Print\\\");\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 72\n                }, this), close, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 52\n                }, this), \"else\", open, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 55\n                }, this), \"printf(stack[top]);\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 64\n                }, this), close]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 61\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 48\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"code\",\n              children: code === 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: fnName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\" Declare the variable as MAXSIZE with the size of Stack\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 103\n                  }, this), \"create a array as stack and initialize its size with[MAXSIZE]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 110\n                  }, this), \"create another variable as top and initialize with -1 as it will point the top\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true) : code === 3 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: fnName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [sen1, \" and less then MAXSIZE\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 76\n                  }, this), \"if condition is true then decrement the top by 1 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 98\n                  }, this), \"else show no data  present\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true) : code == 2 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: fnName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [sen1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 55\n                  }, this), \"if condition is true then increment the top by 1\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 97\n                  }, this), \"else show stack is full\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true) : code === 4 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: fnName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [sen1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 55\n                  }, this), \"if condition is true then show no data found\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 93\n                  }, this), \"else print the stack[top]value.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DisplayScreen Common\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"heading\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Display Screen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'wheat',\n              borderBottom: '10em solid black',\n              borderLeft: '10em solid black',\n              borderRight: '10em solid black',\n              padding: '10em 10em 0em 10em',\n              marginBottom: \"3%\"\n            },\n            children: stack.map(data => {\n              return /*#__PURE__*/_jsxDEV(react.Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Data=\", data]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Stack, \"VXE/3LWxxh1p3BHexCFYM29kXNk=\");\n\n_c = Stack;\nexport default Stack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stack\");","map":{"version":3,"names":["react","useEffect","useState","Stack","temp","settemp","temp2","settemp2","size","setsize","top","settop","stack","setstack","fnName","setfnName","code","setcode","Size","alert","Push","parseInt","val","prompt","Pop","console","log","tempArr","filter","elem","Peek","dec","open","close","sen1","e","target","value","width","textAlign","backgroundColor","borderBottom","borderLeft","borderRight","padding","marginBottom","map","data"],"sources":["D:/GitHub/dsavisualizer/src/Stack/Stack.jsx"],"sourcesContent":["import react, { useEffect, useState } from \"react\";\r\nimport \"../Style/Stack.css\";\r\nconst Stack = () => {\r\n    const [temp, settemp] = useState();\r\n    const [temp2, settemp2] = useState();\r\n    const [size, setsize] = useState();\r\n    const [top, settop] = useState(-1);\r\n    const [stack, setstack] = useState([]);\r\n    const [fnName, setfnName] = useState('');\r\n    const [code, setcode] = useState();\r\n    const Size = () => {\r\n        if (!temp) {\r\n            alert('Enter the value');\r\n        } else {\r\n            setsize(temp);\r\n            settemp('');\r\n            setfnName('Declartion Function');\r\n            setcode(1);\r\n        }\r\n    }\r\n    const Push = () => {\r\n        if (!size) {\r\n            alert('Enter the value');\r\n        }\r\n        else {\r\n            if (top <= parseInt(size) - 2) {\r\n                settop(top + 1);\r\n                let val = prompt(`Enter the ${top + 1} value`);\r\n                setstack([...stack, val]);\r\n                setfnName('Push Function');\r\n                setcode(2)\r\n            } else {\r\n                alert('Stack Full');\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const Pop = () => {\r\n        if (top === -1) {\r\n            alert('stack empty');\r\n        }\r\n        else {\r\n            let temp = stack[top];\r\n            console.log(temp);\r\n            let tempArr = stack.filter((elem) => {\r\n                return elem !== temp;\r\n            })\r\n            setstack(tempArr);\r\n            settop(top - 1);\r\n            setfnName('Pop Function');\r\n            setcode(3);\r\n        }\r\n    }\r\n\r\n    const Peek = () => {\r\n        if (top === -1) {\r\n            alert(\"stack is empty\");\r\n        } else {\r\n            alert(`Your Top Value Is ${stack[top]}`);\r\n            setfnName('Peek Function');\r\n            setcode(4);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        settemp2(stack[top]);\r\n    }, [Pop]);\r\n    const dec = \"<\";\r\n    const open = \"{\";\r\n    const close = \"}\";\r\n    const sen1 = \"Checks wheather the top is less then equal to -1 \";\r\n    return (\r\n        <react.Fragment>\r\n            <div className=\"Array\">\r\n                <div className=\"ArrayComp\">\r\n                    <div className=\"Heading\">\r\n                        <h1>Stack</h1>\r\n                    </div>\r\n                    <div className=\"Content\">\r\n                        <p><q>A stack is an  array or list structure of function calls and parameters used in modern\r\n                            computer and CPU architecture. Similar to a stack of plates at buffet resturent or cafeteria, element\r\n                            in a stack are added or removed from the top of the stack,in a \"last in first , first out\" or LIFO order</q></p>\r\n                    </div>\r\n                    <div className=\"Syntax Common\">\r\n                        <div className=\"input\">\r\n                            <label>Enter Stack Value</label>\r\n                            <input type=\"number\"\r\n                                placeholder=\"Size Between 1 to 10\"\r\n                                onChange={(e) => { settemp(e.target.value); }}\r\n                                value={temp || ''}\r\n                            />\r\n                            <button onClick={Size}>submit</button>\r\n                        </div>\r\n\r\n                        <div className=\"function Common\">\r\n                            <button onClick={Push}>Push</button>\r\n                            <button onClick={Pop}>POP</button>\r\n                            <button onClick={Peek}>Peek</button>\r\n                        </div>\r\n                        <div className=\"Discription\">\r\n                            <p>Size={size} Top={top}</p>\r\n                        </div>\r\n                        <div className=\"CodeArea\">\r\n                            <h1>Code Of An Stack</h1>\r\n                                <div className=\"code\">\r\n                                    <strong>C++ Program</strong>\r\n                                    <span style={{ width: '100%', textAlign: 'center' }}>{fnName}</span>\r\n                                    {\r\n                                        code === 1 ? <p>\r\n                                            int MAXSIZE = {size};<br />\r\n                                            int stack[{size}];<br />\r\n                                            int top = -1;<br />\r\n                                        </p> : code === 2 ? <p>\r\n                                            if(top{dec}=-1){open}<br />\r\n                                            printf(\"Enter the Value\");<br />\r\n                                            {close}<br />\r\n                                            else{open}<br />\r\n                                            top=top+1;<br />\r\n                                            stack[top]=value;<br />{close}\r\n                                        </p> : code === 3 ? <p>\r\n                                            if(top{dec}=-1){open}<br />\r\n                                            printf(\"No Data To Delete\");<br />\r\n                                            {close}<br />\r\n                                            else{open}<br />\r\n                                            top=top-1;<br />{close}\r\n                                        </p> : code === 4 ? <p>\r\n                                            if(top{dec}=-1){open}<br />\r\n                                            printf(\"No Data To Print\");<br />\r\n                                            {close}<br />\r\n                                            else{open}<br />\r\n                                            printf(stack[top]);<br />{close}\r\n                                        </p> : <p></p>\r\n                                    }\r\n                                </div>\r\n                                <div className=\"code\">\r\n                                    {\r\n                                        code === 1 ? <>\r\n                                            <strong>{fnName}</strong>\r\n                                            <p> Declare the variable as MAXSIZE with the size of Stack<br />\r\n                                                create a array as stack and initialize its size with[MAXSIZE]<br />\r\n                                                create another variable as top and initialize with -1 as it will point the top\r\n                                            </p>\r\n                                        </> : code === 3 ? <>\r\n                                            <strong>{fnName}</strong>\r\n                                            <p>{sen1} and less then MAXSIZE<br />\r\n                                                if condition is true then decrement the top by 1 <br />\r\n                                                else show no data  present</p>\r\n                                        </> : code == 2 ? <>\r\n                                            <strong>{fnName}</strong>\r\n                                            <p>\r\n                                                {sen1}<br />\r\n                                                if condition is true then increment the top by 1<br />\r\n                                                else show stack is full\r\n                                            </p>\r\n                                        </> : code === 4 ? <>\r\n                                            <strong>{fnName}</strong>\r\n                                            <p>\r\n                                                {sen1}<br />\r\n                                                if condition is true then show no data found<br />\r\n                                                else print the stack[top]value.\r\n                                            </p>\r\n                                        </> : <p></p>\r\n                                    }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"DisplayScreen Common\">\r\n                        <div className=\"heading\"><h1>Display Screen</h1></div>\r\n                        <div style={{\r\n                            backgroundColor: 'wheat', borderBottom: '10em solid black', borderLeft: '10em solid black', borderRight: '10em solid black',\r\n                            padding: '10em 10em 0em 10em', marginBottom: \"3%\"\r\n                        }}>\r\n                            {\r\n                                stack.map((data) => {\r\n                                    return (\r\n                                        <react.Fragment>\r\n\r\n                                            <p>Data={data}</p>\r\n\r\n                                        </react.Fragment>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </react.Fragment>\r\n    );\r\n}\r\n\r\nexport default Stack;"],"mappings":"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"},"metadata":{},"sourceType":"module"}